// ********RoostGPT********
/*
Test generated by RoostGPT for test MiniProjects using AI Type Open AI and AI Model gpt-4-1106-preview

ROOST_METHOD_HASH=setOnMessageReceivedListeners_b7a2ddbbcf
ROOST_METHOD_SIG_HASH=setOnMessageReceivedListeners_dc991551b9

================================VULNERABILITIES================================
Vulnerability: Improper Input Validation
Issue: Accepting a collection of listeners without validating the content can lead to the execution of arbitrary code if the collection contains malicious BiConsumer implementations.
Solution: Implement strict validation of the input collection and its contents. Ensure that only trusted BiConsumer implementations are added to the onMessageReceivedListeners collection.

Vulnerability: Information Disclosure
Issue: If the Message object contains sensitive information and the listeners are not trusted, there's a risk of leaking information to an unauthorized party.
Solution: Ensure that sensitive information is redacted from the Message objects or that proper access control is implemented for listeners.

Vulnerability: Unrestricted Registration of Listeners
Issue: Allowing unrestricted registration of listeners can lead to a situation where an excessive number of listeners are added, potentially causing a Denial of Service (DoS) by exhausting system resources.
Solution: Limit the number of listeners that can be registered and monitor the performance and resource usage of the system to prevent abuse.

================================================================================
Scenario 1: Adding a non-empty collection of listeners

Details:
  TestName: addNonEmptyListenersCollection
  Description: This test verifies that a non-empty collection of listeners can be added successfully to the onMessageReceivedListeners list.
Execution:
  Arrange: Create a non-empty collection of BiConsumer<String, Message> listeners.
  Act: Invoke the setOnMessageReceivedListeners method with the non-empty collection.
  Assert: Assert that the onMessageReceivedListeners list is equal to the collection provided.
Validation:
  The assertion verifies that the list of listeners is updated with the new collection of listeners, ensuring that the method correctly sets the listeners for message received events. This is significant as it confirms that the application can handle multiple listeners for messages.

Scenario 2: Adding an empty collection of listeners

Details:
  TestName: addEmptyListenersCollection
  Description: This test checks that adding an empty collection clears any existing listeners in the onMessageReceivedListeners list.
Execution:
  Arrange: Create an empty collection of BiConsumer<String, Message> listeners.
  Act: Invoke the setOnMessageReceivedListeners method with the empty collection.
  Assert: Assert that the onMessageReceivedListeners list is empty.
Validation:
  The assertion ensures that the list of listeners is cleared when an empty collection is provided, which is essential for cases where no message received events should be handled.

Scenario 3: Passing null as the collection of listeners

Details:
  TestName: passNullListenersCollection
  Description: This test ensures that passing null to the setOnMessageReceivedListeners method does not alter the existing list of listeners.
Execution:
  Arrange: Ensure the onMessageReceivedListeners list has some listeners added to it.
  Act: Invoke the setOnMessageReceivedListeners method with a null parameter.
  Assert: Assert that the onMessageReceivedListeners list remains unchanged.
Validation:
  The assertion checks that the method correctly handles a null input by not modifying the existing listeners, which is critical for maintaining the current state when no changes are intended.

Scenario 4: Replacing existing listeners with a new collection

Details:
  TestName: replaceWithNewListenersCollection
  Description: This test verifies that the current list of listeners is replaced by a new collection when the setOnMessageReceivedListeners method is called.
Execution:
  Arrange: Create a collection of BiConsumer<String, Message> listeners and add them to the onMessageReceivedListeners list. Then create a different collection of listeners.
  Act: Invoke the setOnMessageReceivedListeners method with the new collection of listeners.
  Assert: Assert that the onMessageReceivedListeners list matches the new collection.
Validation:
  The assertion confirms that the method successfully replaces the existing listeners with a new set, ensuring the application can update the message received event handling dynamically.

Scenario 5: Adding a collection with null listeners

Details:
  TestName: addCollectionWithNullListeners
  Description: This test ensures that the setOnMessageReceivedListeners method can handle a collection that contains null listeners without throwing an exception.
Execution:
  Arrange: Create a collection of BiConsumer<String, Message> listeners that includes at least one null value.
  Act: Invoke the setOnMessageReceivedListeners method with this collection.
  Assert: Assert that the onMessageReceivedListeners list contains all non-null listeners from the collection.
Validation:
  The assertion checks that the method filters out null values and adds only valid listeners to the list, which is important for avoiding null pointer exceptions during event handling.
*/

// ********RoostGPT********
package com.github.dbchar.zoomapi.utils.services;

import com.github.dbchar.zoomapi.models.Message;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.function.BiConsumer;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

public class MonitorTaskSetOnMessageReceivedListenersTest {

    private MonitorTask monitorTask;
    private Collection<BiConsumer<String, Message>> listeners;

    @Before
    public void setUp() {
        monitorTask = Mockito.mock(MonitorTask.class);
        Mockito.doCallRealMethod().when(monitorTask).setOnMessageReceivedListeners(Mockito.any());
        Mockito.doCallRealMethod().when(monitorTask).addOnMessageReceivedListener(Mockito.any());
    }

    @Test
    public void addNonEmptyListenersCollection() {
        // Arrange
        listeners = new ArrayList<>();
        listeners.add((channel, message) -> {});
        listeners.add((channel, message) -> {});
        // Act
        monitorTask.setOnMessageReceivedListeners(listeners);
        // Assert
        assertEquals(listeners, monitorTask.onMessageReceivedListeners);
    }

    @Test
    public void addEmptyListenersCollection() {
        // Arrange
        listeners = new ArrayList<>();
        // Act
        monitorTask.setOnMessageReceivedListeners(listeners);
        // Assert
        assertTrue(monitorTask.onMessageReceivedListeners.isEmpty());
    }

    @Test
    public void passNullListenersCollection() {
        // Arrange
        BiConsumer<String, Message> listener = (channel, message) -> {};
        monitorTask.addOnMessageReceivedListener(listener);
        int originalSize = monitorTask.onMessageReceivedListeners.size();
        // Act
        monitorTask.setOnMessageReceivedListeners(null);
        // Assert
        assertEquals(originalSize, monitorTask.onMessageReceivedListeners.size());
    }

    @Test
    public void replaceWithNewListenersCollection() {
        // Arrange
        BiConsumer<String, Message> oldListener = (channel, message) -> {};
        monitorTask.addOnMessageReceivedListener(oldListener);
        listeners = Arrays.asList((channel, message) -> {}, (channel, message) -> {});
        // Act
        monitorTask.setOnMessageReceivedListeners(listeners);
        // Assert
        assertEquals(listeners, monitorTask.onMessageReceivedListeners);
    }

    @Test
    public void addCollectionWithNullListeners() {
        // Arrange
        listeners = new ArrayList<>();
        listeners.add(null);
        listeners.add((channel, message) -> {});
        // Act
        monitorTask.setOnMessageReceivedListeners(listeners);
        // Assert
        assertEquals(1, monitorTask.onMessageReceivedListeners.size());
        assertTrue(monitorTask.onMessageReceivedListeners.containsAll(Arrays.asList((channel, message) -> {})));
    }
}
